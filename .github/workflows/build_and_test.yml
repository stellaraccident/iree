name: Build and Test CI

on:
  pull_request:
  push:

jobs:
  # Run clang-format and verify there are no errors. We don't want to bother
  # building until we've at least got clean code.
  lint:
    name: Lint 
    runs-on: ubuntu-latest
    steps:
    - name: Installing dependencies (ubuntu-latest)
      run: |
        sudo add-apt-repository -y "deb http://mirror.enzu.com/ubuntu/ eoan main universe"
        sudo apt-get update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq -y --no-install-recommends clang-format-9
        wget https://raw.githubusercontent.com/llvm-mirror/clang/master/tools/clang-format/git-clang-format -O /tmp/git-clang-format
        chmod +x /tmp/git-clang-format

    - name: Checking out latest version and all submodules
      uses: actions/checkout@v1
      with:
        submodules: true
        fetch-depth: 200

    - name: Running clang-format on changed source files
      # TODO(benvanik): actually filter to changed files.
      run: |
        /tmp/git-clang-format origin/master --binary=clang-format-9
        git diff --exit-code

  build:
    name: "Build: ${{ matrix.build_config }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_config:
          - ubuntu-host-bazel-clang
          - ubuntu-host-cmake-clang
          - ubuntu-host-cmake-gcc
          - ubuntu-emscripten-cmake-emscripten
          - macos-host-cmake-clang
          - windows-host-bazel-msvc
          - windows-host-cmake-msvc
    
    steps:
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: mymindstorm/setup-emsdk@v1
      if: matrix.target_os == 'emscripten'
    - name: Installing dependencies (ubuntu-latest)
      if: matrix.host_os == 'ubuntu-latest'
      run: |
        sudo add-apt-repository -y "deb http://mirror.enzu.com/ubuntu/ eoan main universe"
        echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
        sudo apt-get update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq -y --no-install-recommends bazel llvm-9 ninja-build
    - name: Installing dependencies (macos-latest)
      if: matrix.host_os == 'macos-latest'
      run: |
        brew install bazel llvm ninja
    - name: Installing dependencies (windows-latest)
      if: matrix.host_os == 'windows-latest'
      run: |
        choco install -y bazel llvm ninja

    - name: Checking out latest version and all submodules
      uses: actions/checkout@v1
      with:
        submodules: true
        fetch-depth: 200
    
    # TODO(benvanik): setup CC env var for MSVC (use vswhere to find cl.exe?)
    - name: Configuring compilation environment to use MSVC
      if: matrix.compiler == 'msvc'
      run: |
        export CXX=cl.exe
    - name: Configuring compilation environment to use clang
      if: matrix.compiler == 'clang'
      run: |
        export CXX=clang-9
    - name: Configuring compilation environment to use gcc
      if: matrix.compiler == 'gcc'
      run: |
        export CXX=gcc

    - name: Building and testing with CMake
      if: matrix.build_system == 'cmake'
      # TODO(benvanik): configure ctest
      run: |
        mkdir build/
        cmake -B build/ -S ${PWD}
        cmake --build build/ -- -j4

    - name: Building and testing with Bazel
      if: matrix.build_system == 'bazel'
      run: |
        bazel build //iree/...
        bazel test //iree/...
        
    # TODO(benvanik): coverage: build with -copt --coverage and `bash <(curl -s https://codecov.io/bash)`
