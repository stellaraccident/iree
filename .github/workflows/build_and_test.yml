name: Build and Test CI

on:
  pull_request:
  push:

jobs:
  # Run clang-format and verify there are no errors. We don't want to bother
  # building until we've at least got clean code.
  lint:
    name: Lint 
    runs-on: ubuntu-latest
    steps:
    - name: Installing dependencies (ubuntu-latest)
      run: |
        sudo add-apt-repository -y "deb http://mirror.enzu.com/ubuntu/ eoan main universe"
        sudo apt-get update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq -y --no-install-recommends clang-format-9
        wget https://raw.githubusercontent.com/llvm-mirror/clang/master/tools/clang-format/git-clang-format
        chmod +x git-clang-format

    - name: Checking out latest version and all submodules
      uses: actions/checkout@v1
      with:
        submodules: true
        fetch-depth: 200

    - name: Running clang-format on changed source files
      # TODO(benvanik): actually filter to changed files.
      run: |
        ./git-clang-format origin/master --binary=clang-format-9
        git diff --exit-code

  tidy:
    name: Clang Tidy
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
    - name: Installing dependencies (ubuntu-latest)
      run: |
        sudo add-apt-repository -y "deb http://mirror.enzu.com/ubuntu/ eoan main universe"
        sudo apt-get update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq  -y --no-install-recommends clang-tidy-9
          
    - name: Checking out latest version and all submodules
      uses: actions/checkout@v1
      with:
        submodules: true
        fetch-depth: 200
    
    # Configure and run clang-tidy.
    - name: Configuring CMake and exporting compile commands
      run: |
        cmake -B build/ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - name: Running clang-tidy on changed source files
      # TODO(benvanik): actually filter to changed files.
      run: |
        find "$PWD/iree" \( -name '*.[ch]' -o -name '*.cc' \) -exec clang-tidy-9 -p "$PWD" {} +

  build:
    name: Build on ${{ matrix.host_os }} with ${{ matrix.compiler }} for ${{ matrix.target_os }}
    needs: [lint]
    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        host_os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - host_os: ubuntu-latest
            target_os: host
            build_system: bazel
            compiler: clang
          - host_os: ubuntu-latest
            target_os: host
            build_system: cmake
            compiler: clang
          - host_os: ubuntu-latest
            target_os: host
            build_system: cmake
            compiler: gcc
          - host_os: ubuntu-latest
            target_os: emscripten
            build_system: cmake
            compiler: emscripten
          - host_os: macos-latest
            target_os: host
            build_system: bazel
            compiler: clang
          - host_os: macos-latest
            target_os: host
            build_system: cmake
            compiler: clang
          - host_os: windows-latest
            target_os: host
            build_system: bazel
            compiler: msvc
          - host_os: windows-latest
            target_os: host
            build_system: cmake
            compiler: msvc
    
    steps:
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: mymindstorm/setup-emsdk@v1
      if: matrix.target_os == 'emscripten'
    - name: Installing dependencies (${{ matrix.host_os }})
      if: matrix.host_os == 'ubuntu-latest'
      run: |
        sudo add-apt-repository -y "deb http://mirror.enzu.com/ubuntu/ eoan main universe"
        echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        sudo apt-get install curl
        curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
        sudo apt-get update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq -y --no-install-recommends install bazel llvm-9 ninja-build
    - name: Installing dependencies (${{ matrix.host_os }})
      uses: artemnovichkov/action-homebrew@master
      if: matrix.host_os == 'macos-latest'
      with:
        args: bazel llvm ninja
    - name: Installing dependencies (${{ matrix.host_os }})
      uses: crazy-max/ghaction-chocolatey@master
      if: matrix.host_os == 'windows-latest'
      with:
        args: bazel llvm ninja

    - name: Checking out latest version and all submodules
      uses: actions/checkout@v1
      with:
        submodules: true
        fetch-depth: 200
    
    # TODO(benvanik): setup CC env var for MSVC (use vswhere to find cl.exe?)
    - name: Configuring compilation environment to use ${{ matrix.compiler }}
      if: matrix.compiler == 'msvc'
      run: |
        export CC=cl.exe
    - name: Configuring compilation environment to use ${{ matrix.compiler }}
      if: matrix.compiler != 'msvc'
      run: |
        export CC=${{ matrix.compiler }}

    - name: Building and testing with CMake
      if: matrix.build_system == 'cmake'
      # TODO(benvanik): configure ctest
      run: |
        cmake -B build/

    - name: Building and testing with Bazel
      if: matrix.build_system == 'bazel'
      run: |
        bazel build //iree/...
        bazel test //iree/...
        
    # TODO(benvanik): coverage: build with -copt --coverage and `bash <(curl -s https://codecov.io/bash)`
